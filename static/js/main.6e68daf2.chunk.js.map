{"version":3,"sources":["Portfolio/PortfolioTable.js","Portfolio/AddStockDialog.js","Portfolio/PortfolioHeader.js","Portfolio/PortfolioFooter.js","Portfolio/PostfolioStyles.js","Alphavantage.js","Portfolio/Portfolio.js","Base.js","serviceWorker.js","index.js"],"names":["PortfolioTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stocks","_this$props","classes","checkMarkClick","currencySymbol","forEach","row","value","total","console","log","react_default","a","createElement","Table_default","width","TableHead_default","TableRow","className","tableHead","TableCell_default","tableCell","TableBody_default","tableBody","map","tableRow","key","name","Checkbox_default","checkbox","onChange","parseFloat","toFixed","quantity","Component","AddStockDialog","nameChange","event","setState","stockName","target","amountChange","stockAmount","clearState","prevProps","isOpen","closeDialog","submitStock","_this$state","Dialog_default","open","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","margin","label","type","DialogActions_default","Button_default","onClick","color","PortfolioHeader","eurosSelected","changeCurrency","Paper_default","portfolioHeader","Grid_default","container","item","xs","Typography_default","noWrap","variant","PortfolioFooter","totalValue","addStock","noCheckedStocks","deleteCheckedStock","portfolioFooter","justify","disabled","styles","theme","deleteButton","padding","portfolio","objectSpread","height","mixins","gutters","paddingTop","spacing","unit","paddingBottom","portfolioBase","marginBottom","tableWrapper","overflowY","textAlign","backgroundColor","position","top","BASE_URL","API_KEY","sendGetRequest","query","Promise","resolve","reject","req","XMLHttpRequest","url","onload","status","response","Error","statusText","onerror","send","debugRows","Portfolio","checkedStock","deleteStockButtonEnabled","addStockDialogOpen","rows","EurToUsdRatio","parseStockValueFromAAJSON","bind","assertThisInitialized","getTotalValue","reCalculateValues","calculateStockAndTotalValues","setRealTimeValueAndTotal","_this2","then","JSON","parse","exchangeRate","alert","stock","reduce","b","_this3","rowsProcessed","length","stockRow","symbol","resp","_this4","selectedCurrency","currentTarget","multiplier","indexOf","filter","s","push","_this5","_this$state2","newRows","includes","amount","_this6","newRow","sort","localeCompare","_this7","_this$state3","style","IconButton_default","aria-label","Delete_default","Card_default","Portfolio_PortfolioHeader","Portfolio_PortfolioTable","Portfolio_PortfolioFooter","Portfolio_AddStockDialog","portfolioName","alphaVantageJSON","alphaVantageObject","latestTimeOfValue","keys","withStyles","Base","src_Portfolio_Portfolio","Boolean","window","location","hostname","match","ReactDOM","render","src_Base","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e68daf2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/es/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Table from \"@material-ui/core/Table\";\r\n\r\nclass PortfolioTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stocks: props.stocks,\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes, stocks, checkMarkClick, currencySymbol } = this.props;\r\n        stocks.forEach(row => {\r\n            if (!row.value){\r\n                row.value = 0;\r\n                row.total = 0;\r\n            }\r\n        });\r\n        stocks.forEach(row => {\r\n            console.log(row);\r\n            }\r\n        );\r\n        return (\r\n            <Table>\r\n                <colgroup>\r\n                    <col width=\"10%\"/>\r\n                    <col width=\"15%\"/>\r\n                    <col width=\"25%\"/>\r\n                    <col width=\"25%\"/>\r\n                    <col width=\"25%\"/>\r\n                </colgroup>\r\n                <TableHead>\r\n                    <TableRow className={classes.tableHead}>\r\n                        <TableCell className={classes.tableCell}>Select</TableCell>\r\n                        <TableCell className={classes.tableCell}>Name</TableCell>\r\n                        <TableCell className={classes.tableCell}>Unit value</TableCell>\r\n                        <TableCell className={classes.tableCell}>Quantity</TableCell>\r\n                        <TableCell className={classes.tableCell}>Total value</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody className={classes.tableBody}>\r\n                    {stocks.map(row => {\r\n                        return (\r\n                            <TableRow className={classes.tableRow} key={row.name}>\r\n                                <TableCell className={classes.tableCell}>\r\n                                    <Checkbox className={classes.checkbox} onChange={() => checkMarkClick(row.name)}/>\r\n                                </TableCell>\r\n                                <TableCell className={classes.tableCell}>{row.name}</TableCell>\r\n                                <TableCell className={classes.tableCell}>{parseFloat(row.value).toFixed(2)}{currencySymbol}</TableCell>\r\n                                <TableCell className={classes.tableCell}>{row.quantity}</TableCell>\r\n                                <TableCell className={classes.tableCell}>{row.total.toFixed(2)}{currencySymbol}</TableCell>\r\n                            </TableRow>\r\n                        );\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PortfolioTable;","import React, {Component} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\nclass AddStockDialog extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            stockName: \"\",\r\n            stockAmount: \"\",\r\n        }\r\n    }\r\n\r\n\r\n    //Whenever the dialog closes, clear the state\r\n    componentDidUpdate(prevProps) {\r\n        const {isOpen} = this.props;\r\n        if (isOpen === false && prevProps.isOpen === true) {\r\n            this.clearState();\r\n        }\r\n    }\r\n\r\n    nameChange = (event) => {\r\n        this.setState({stockName: event.target.value})\r\n    };\r\n\r\n    amountChange = (event) => {\r\n        this.setState({stockAmount: event.target.value})\r\n    };\r\n\r\n    clearState = () => {\r\n        this.setState({stockName: \"\", stockAmount: \"\"})\r\n    };\r\n\r\n    render() {\r\n        const {name, isOpen, closeDialog, submitStock} = this.props;\r\n        const {stockName, stockAmount} = this.state;\r\n        return (\r\n            <Dialog\r\n                open={isOpen}\r\n                aria-labelledby=\"form-dialog-title\"\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">Adding stock to portfolio: {name}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Please enter your new stock's name and quantity below:\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Stock name\"\r\n                        value={stockName}\r\n                        onChange={this.nameChange}\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        label=\"Amount of stock\"\r\n                        type=\"number\"\r\n                        value={stockAmount}\r\n                        onChange={this.amountChange}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={closeDialog} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={() => submitStock(stockName, stockAmount)} color=\"primary\">\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddStockDialog;","import React, {Component} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nclass PortfolioHeader extends Component {\r\n    render() {\r\n        const {classes, name, eurosSelected, changeCurrency} = this.props;\r\n\r\n        return (\r\n            <Paper className={classes.portfolioHeader}>\r\n                <Grid container>\r\n                    <Grid item xs={7}>\r\n                        <Typography noWrap variant=\"h6\">{name}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Button\r\n                            onClick={changeCurrency}\r\n                            variant={eurosSelected ? \"contained\" : \"outlined\"}\r\n                            value=\"euro\"\r\n                            color=\"primary\">\r\n                            €\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Button\r\n                            onClick={changeCurrency}\r\n                            variant={eurosSelected ? \"outlined\" : \"contained\"}\r\n                            value=\"dollar\"\r\n                            color=\"primary\">\r\n\r\n                            $\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nPortfolioHeader.propTypes = {};\r\n\r\nexport default PortfolioHeader;","import React, {Component} from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nclass PortfolioFooter extends Component {\r\n    render() {\r\n        const {\r\n            classes,\r\n            totalValue,\r\n            addStock,\r\n            noCheckedStocks,\r\n            deleteCheckedStock,\r\n            currencySymbol,\r\n        } = this.props;\r\n        return (\r\n            <Paper className={classes.portfolioFooter}>\r\n                <Typography variant=\"caption\">Total value of portfolio: {totalValue.toFixed(2)}{currencySymbol}</Typography>\r\n                <Grid container justify={\"space-evenly\"}>\r\n                    <Grid item>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            onClick={addStock}>\r\n                            add stock\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button variant=\"contained\">perf. Graph</Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            disabled={noCheckedStocks}\r\n                            variant=\"outlined\" color=\"secondary\"\r\n                            onClick={deleteCheckedStock}\r\n                        >\r\n                            Delete\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PortfolioFooter;","const styles = theme => ({\r\n    deleteButton: {\r\n        padding: 0,\r\n    },\r\n    portfolio: {\r\n        width: \"400px\",\r\n        height: \"325px\",    // Because the div containing the delete button is 25px and the portfolioBase is 300px\r\n        ...theme.mixins.gutters(),\r\n        paddingTop: theme.spacing.unit * 2,\r\n        paddingBottom: theme.spacing.unit * 2,\r\n    },\r\n    portfolioBase: {\r\n        height: \"300px\",\r\n    },\r\n    portfolioHeader: {\r\n        ...theme.mixins.gutters(),\r\n        paddingTop: theme.spacing.unit,\r\n        paddingBottom: theme.spacing.unit,\r\n        marginBottom: \"3px\",\r\n    },\r\n    portfolioFooter: {\r\n        padding: theme.spacing.unit,\r\n    },\r\n    tableWrapper: {\r\n        height: \"175px\",\r\n        overflowY: \"scroll\",\r\n    },\r\n    tableCell: {\r\n        width: \"20px\",\r\n        padding: \"2px\",\r\n        textAlign: \"center\",\r\n    },\r\n    tableHead: {\r\n        backgroundColor: \"#fff\",\r\n        position: \"sticky\",\r\n        top: 0\r\n    },\r\n    tableRow: {\r\n        height: \"50px\",\r\n    },\r\n    checkbox: {\r\n        padding: \"8px\",\r\n    }\r\n});\r\n\r\nexport default styles;","const BASE_URL = \"https://www.alphavantage.co/query?\";\r\nconst API_KEY = \"H0LW74TMCBD0BJ0F\";\r\n\r\nexport const getUSDPriceFor = (symbol) => {\r\n    const query = \"function=TIME_SERIES_INTRADAY&interval=5min&symbol=\" + symbol;\r\n    return(sendGetRequest(query));\r\n};\r\n\r\nexport const getEurToUSD = () => {\r\n    const query = \"function=CURRENCY_EXCHANGE_RATE&to_currency=USD&from_currency=EUR\";\r\n    return(sendGetRequest(query));\r\n};\r\n\r\n\r\nfunction sendGetRequest(query) {\r\n    return new Promise((resolve, reject) => {\r\n        const req = new XMLHttpRequest();\r\n        const url = BASE_URL + query + \"&apikey=\" + API_KEY;\r\n        req.open(\"GET\", url);\r\n        req.onload = function(){\r\n            if (req.status === 200) resolve(req.response);\r\n            else reject(Error(req.statusText));\r\n        };\r\n        req.onerror = function () {\r\n            reject(Error(\"Network Error\"));\r\n        };\r\n        req.send();\r\n    })\r\n}\r\n","import React, {Component} from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PortfolioTable from \"./PortfolioTable\";\r\nimport AddStockDialog from \"./AddStockDialog\";\r\nimport PortfolioHeader from \"./PortfolioHeader\";\r\nimport PortfolioFooter from \"./PortfolioFooter\";\r\nimport styles from \"./PostfolioStyles\";\r\nimport {getUSDPriceFor, getEurToUSD} from \"../Alphavantage\";\r\n\r\nconst debugRows = [\r\n    {name: 'MSFT', quantity: 16.0},\r\n    /*{name: 'NOK', quantity: 16.0},\r\n    {name: 'FDX', quantity: 16.0},*/\r\n];\r\n\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            eurosSelected: true,\r\n            totalValue: 0,\r\n            checkedStock: [],\r\n            deleteStockButtonEnabled: false,\r\n            addStockDialogOpen: false,\r\n            rows: debugRows,\r\n            EurToUsdRatio: 1,\r\n        };\r\n\r\n        Portfolio.parseStockValueFromAAJSON = Portfolio.parseStockValueFromAAJSON.bind(this);\r\n        this.checkMarkClick = this.checkMarkClick.bind(this);\r\n        this.deleteCheckedStock = this.deleteCheckedStock.bind(this);\r\n        this.addStock = this.addStock.bind(this);\r\n        this.getTotalValue = this.getTotalValue.bind(this);\r\n        this.changeCurrency = this.changeCurrency.bind(this);\r\n        this.reCalculateValues = this.reCalculateValues.bind(this);\r\n        this.calculateStockAndTotalValues = this.calculateStockAndTotalValues.bind(this);\r\n        this.setRealTimeValueAndTotal = this.setRealTimeValueAndTotal.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        getEurToUSD().then((response) => {\r\n            //If the response doesn't have the expected property, an error has been thrown from Alphavantage\r\n            if (JSON.parse(response)[\"Realtime Currency Exchange Rate\"] != null) {\r\n                const exchangeRate = JSON.parse(response)[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"];\r\n                this.setState({EurToUsdRatio: exchangeRate}, () => {\r\n                    this.calculateStockAndTotalValues();\r\n                });\r\n            } else alert(\"Cannot get EUR-to-USD-ratio! \" + JSON.parse(response)[\"Note\"])\r\n        }, (() => alert(\"Error connecting to Alphavantage!\")));\r\n    }\r\n\r\n    static parseStockValueFromAAJSON(alphaVantageJSON){\r\n        const alphaVantageObject = JSON.parse(alphaVantageJSON);\r\n        const latestTimeOfValue = Object.keys(alphaVantageObject[\"Time Series (5min)\"])[0];\r\n        return (\r\n                    parseFloat(alphaVantageObject[\"Time Series (5min)\"][latestTimeOfValue][\"1. open\"]) +\r\n                    parseFloat(alphaVantageObject[\"Time Series (5min)\"][latestTimeOfValue][\"2. high\"]) +\r\n                    parseFloat(alphaVantageObject[\"Time Series (5min)\"][latestTimeOfValue][\"3. low\"]) +\r\n                    parseFloat(alphaVantageObject[\"Time Series (5min)\"][latestTimeOfValue][\"4. close\"])\r\n                ) / 4.0\r\n    }\r\n\r\n    getTotalValue() {\r\n        return this.state.rows.map(stock => stock.total).reduce((a, b) => a + b);\r\n    }\r\n\r\n    /* For each row, fetch the 'currency to usd' -ratio from Alphavantage. If the API-limit (5 per 1 minute) is reached,\r\n       we use a default value of 5 (just for demo-purposes). This ratio is the value of the stock in usd.\r\n       Then after all rows are processed, in reCalculateValues() we calculate the total value for each row and totally.\r\n       Then if we need the eur-total, we multiply it again by EurToUsdRatio. */\r\n    calculateStockAndTotalValues() {\r\n        const {rows} = this.state;\r\n        let rowsProcessed = 0;\r\n        rows.forEach(row => {\r\n            this.setRealTimeValueAndTotal(row).then(() => {\r\n                rowsProcessed++;\r\n                if (rowsProcessed === rows.length) {\r\n                    this.setState({totalValue: this.getTotalValue()});\r\n                    this.reCalculateValues();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    setRealTimeValueAndTotal(stockRow) {\r\n        return getUSDPriceFor(stockRow.name).then((response) => {\r\n            const resp = JSON.parse(response);\r\n            if (resp[\"Note\"] || resp[\"Error Message\"]) {\r\n                alert(\"Price for \" + stockRow.name + \" not found or reached API-call-limit! Using a spoofed value of 10$.\");\r\n                stockRow.value = 10;\r\n                stockRow.total = stockRow.value * stockRow.quantity\r\n            } else {\r\n                stockRow.value = Portfolio.parseStockValueFromAAJSON(response);\r\n                stockRow.total = stockRow.value * stockRow.quantity\r\n            }\r\n        });\r\n    }\r\n\r\n    changeCurrency(event) {\r\n        const {eurosSelected} = this.state;\r\n        const selectedCurrency = event.currentTarget.value;\r\n        if (selectedCurrency === \"euro\" && !eurosSelected)\r\n            this.setState({eurosSelected: true}, () => {\r\n                this.reCalculateValues();\r\n            });\r\n        else if (selectedCurrency === \"dollar\" && eurosSelected) {\r\n            this.setState({eurosSelected: false}, () => {\r\n                this.reCalculateValues();\r\n            });\r\n        }\r\n    }\r\n\r\n    reCalculateValues() {\r\n        const {rows, eurosSelected, EurToUsdRatio} = this.state;\r\n        const multiplier = eurosSelected ? 1.0/ EurToUsdRatio : EurToUsdRatio;\r\n        rows.forEach(row => {\r\n            row.value = row.value * multiplier;\r\n            row.total = row.value * row.quantity;\r\n        });\r\n        this.setState({totalValue: this.getTotalValue()});\r\n    }\r\n\r\n    checkMarkClick(key) {\r\n        const {checkedStock} = this.state;\r\n        //If the checked stock already contains the key, then delete it. Otherwise add it to the state.\r\n        if (checkedStock.indexOf(key) > -1) this.setState({checkedStock: checkedStock.filter(s => s !== key)});\r\n        else {\r\n            checkedStock.push(key);\r\n            this.setState({checkedStock: checkedStock})\r\n        }\r\n    }\r\n\r\n    deleteCheckedStock() {\r\n        const {checkedStock, rows} = this.state;\r\n        //Remove all stocks that are found in the checkedStock-list (e.g. remove all the selected rows)\r\n        const newRows = rows.filter((stock) => !checkedStock.includes(stock.name));\r\n        //Empty selected (since they are deleted) and callback the new total calculation since state-setting is async\r\n        this.setState({rows: newRows, checkedStock: []},\r\n            () => this.setState({totalValue: this.getTotalValue()}))\r\n    }\r\n\r\n    addStock(name, amount) {\r\n        const {rows} = this.state;\r\n        if (!rows.map(row => row.name).includes(name)) {\r\n            const newRow = {name: name, quantity: amount};\r\n            rows.push(newRow);\r\n            this.setRealTimeValueAndTotal(newRow).then(() => {\r\n                //Sort the rows by name\r\n                rows.sort((a, b) => a.name.localeCompare(b.name) || a.name.localeCompare(b.name));\r\n                this.setState({addStockDialogOpen: false, totalValue: this.getTotalValue()})\r\n            });\r\n        } else {\r\n            alert(\"The stock \" + name + \" already exists!\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {classes, name} = this.props;\r\n        const {addStockDialogOpen, eurosSelected, totalValue} = this.state;\r\n        return (\r\n            <div className={classes.portfolio}>\r\n                <div style={{textAlign: \"right\", height: \"25px\"}}>\r\n                    <IconButton className={classes.deleteButton} aria-label=\"Delete\">\r\n                        <DeleteIcon color=\"secondary\"/>\r\n                    </IconButton>\r\n                </div>\r\n                <Card className={classes.portfolioBase}>\r\n                    <PortfolioHeader\r\n                        classes={classes}\r\n                        name={name}\r\n                        eurosSelected={eurosSelected}\r\n                        changeCurrency={this.changeCurrency}\r\n                    />\r\n                    <div className={classes.tableWrapper}>\r\n                        <PortfolioTable\r\n                            classes={classes}\r\n                            stocks={this.state.rows}\r\n                            checkMarkClick={this.checkMarkClick}\r\n                            currencySymbol={eurosSelected ? \"€\" : \"$\"}\r\n                        />\r\n                    </div>\r\n                    <PortfolioFooter\r\n                        classes={classes}\r\n                        totalValue={totalValue}\r\n                        noCheckedStocks={!this.state.checkedStock.length > 0}\r\n                        deleteCheckedStock={this.deleteCheckedStock}\r\n                        addStock={() => this.setState({addStockDialogOpen: true})}\r\n                        currencySymbol={eurosSelected ? \"€\" : \"$\"}\r\n                    />\r\n                </Card>\r\n                <AddStockDialog\r\n                    portfolioName={name}\r\n                    isOpen={addStockDialogOpen}\r\n                    closeDialog={() => this.setState({addStockDialogOpen: false})}\r\n                    submitStock={this.addStock}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Portfolio);","import React, {Component} from 'react';\nimport './App.css';\nimport Portfolio from \"./Portfolio/Portfolio\";\n\nclass Base extends Component {\n    render() {\n        return (\n            <div className=\"Base\">\n                <Portfolio name={\"Testiportfolio\"}/>\n            </div>\n        );\n    }\n}\n\nexport default Base;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Base is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Base from './Base';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Base />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}